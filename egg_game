#include <windows.h>
#include <GL/glut.h>
#include <stdio.h>
#include <stdlib.h>
#include <math.h>

#define PI 3.14159265358979323846

// ---------- Variables ----------
int eggs_caught = 0, missed_eggs = 0, level_count = 1;
int egg_xc, egg_yc;
int basket_x = 250, basket_y = 40;
int a = 600, b = 650;
int startGame = 0;
int dropped_eggs = 0;
int gameOver = 0;

float egg_speed = 0.4;  // dynamic egg speed

int hen_x = 200, hen_y = 375;
int henDir = 1;
float wingAngle = 0;
int wingDir = 1;

float cloud1 = 100, cloud2 = 400;
float sun_x = 500, sun_y = 580;

// ---------- Utility ----------
void drawText(float x, float y, const char *string, void *font)
{
    glRasterPos2f(x, y);
    for (const char *c = string; *c != '\0'; c++)
        glutBitmapCharacter(font, *c);
}

// ---------- Gradient Background ----------
void drawSky()
{
    glBegin(GL_QUADS);
    glColor3f(0.6, 0.8, 1.0);
    glVertex2f(0, 0);
    glColor3f(0.2, 0.5, 1.0);
    glVertex2f(a, 0);
    glColor3f(0.0, 0.3, 0.8);
    glVertex2f(a, b);
    glColor3f(0.2, 0.5, 1.0);
    glVertex2f(0, b);
    glEnd();
}

// ---------- Sun ----------
void drawSun(float x, float y)
{
    glColor3f(1.0, 0.9, 0.3);
    glBegin(GL_POLYGON);
    for (int t = 0; t <= 360; t++)
        glVertex2f(x + 35 * cos(t * PI / 180), y + 35 * sin(t * PI / 180));
    glEnd();
}

// ---------- Clouds ----------
void drawCloud(float x, float y)
{
    glColor3f(1.0, 1.0, 1.0);
    for (int i = 0; i < 3; i++)
    {
        glBegin(GL_POLYGON);
        for (int t = 0; t <= 360; t++)
        {
            float cx = x + i * 20 + 15 * cos(t * PI / 180);
            float cy = y + 10 * sin(t * PI / 180);
            glVertex2f(cx, cy);
        }
        glEnd();
    }
}

// ---------- Ground ----------
void drawGround()
{
    glBegin(GL_QUADS);
    glColor3f(0.2, 0.6, 0.2);
    glVertex2f(0, 0);
    glVertex2f(a, 0);
    glColor3f(0.0, 0.4, 0.1);
    glVertex2f(a, 100);
    glVertex2f(0, 100);
    glEnd();

 // Add stripes for visual texture
    glColor3f(0.1, 0.5, 0.1);
    for (int i = 0; i < a; i += 20)
    {
        glBegin(GL_LINES);
        glVertex2f(i, 0);
        glVertex2f(i + 20, 100);
        glEnd();
    }
}

// ---------- Hen ----------
void drawHen(int i, int j)

{
    // Body
    glColor3f(1.0, 0.8, 0.6);
    glBegin(GL_POLYGON);
    for (int t = 0; t <= 360; t++)
    {
        float x = i + 70 + 40 * cos(t * PI / 180);
        float y = j + 50 + 25 * sin(t * PI / 180);
        glVertex2f(x, y);
    }
 glEnd();

// Wing (flapping)
    glPushMatrix();
    glTranslatef(i + 70, j + 45, 0);
    glRotatef(sin(wingAngle) * 20, 0, 0, 1);
    glColor3f(0.9, 0.7, 0.4);
    glBegin(GL_POLYGON);
    for (int t = 0; t <= 360; t++)
    {
        float x = 0 + 20 * cos(t * PI / 180);
        float y = 0 + 12 * sin(t * PI / 180);
        glVertex2f(x, y);
    }
    glEnd();
    glPopMatrix();

// Tail
    glColor3f(0.7, 0.4, 0.2);
    glBegin(GL_TRIANGLES);
    glVertex2f(i + 30, j + 55);
    glVertex2f(i + 15, j + 70);
    glVertex2f(i + 25, j + 40);
    glEnd();

// Head
    glColor3f(1.0, 0.8, 0.6);
    glBegin(GL_POLYGON);
    for (int t = 0; t <= 360; t++)
    {
        float x = i + 105 + 15 * cos(t * PI / 180);
        float y = j + 70 + 15 * sin(t * PI / 180);
        glVertex2f(x, y);
    }
    glEnd();

// Beak
    glColor3f(1.0, 0.6, 0.0);
    glBegin(GL_TRIANGLES);
    glVertex2f(i + 120, j + 70);
    glVertex2f(i + 135, j + 75);
    glVertex2f(i + 120, j + 65);
    glEnd();

 // Comb
    glColor3f(1.0, 0.0, 0.0);
    glBegin(GL_POLYGON);
    glVertex2f(i + 95, j + 85);
    glVertex2f(i + 100, j + 95);
    glVertex2f(i + 110, j + 95);
    glVertex2f(i + 115, j + 85);
    glEnd();

 // Eye
    glColor3f(0.0, 0.0, 0.0);
    glPointSize(5);
    glBegin(GL_POINTS);
    glVertex2f(i + 110, j + 75);
    glEnd();
}

// ---------- Egg ----------
void drawEgg()
{
    float x, y;
    glColor3f(1.0, 1.0, 1.0);
    glBegin(GL_POLYGON);
    for (int t = 0; t <= 360; t++)
    {
        x = egg_xc + 8 * cos(t * PI / 180);
        y = egg_yc + 12 * sin(t * PI / 180);
        glVertex2f(x, y);
    }
    glEnd();
}

// ---------- Basket ----------
void drawBasket(int i, int j)
{
    if (i >= a - 60)
        i = a - 60;
    if (i <= 0)
        i = 0;

// Wooden basket body
    glColor3f(0.6, 0.3, 0.1);
    glBegin(GL_QUADS);
    glVertex2f(0.0 + i, 30.0 + j);
    glVertex2f(10.0 + i, 10.0 + j);
    glVertex2f(50.0 + i, 10.0 + j);
    glVertex2f(60.0 + i, 30.0 + j);
    glEnd();

// Shading stripe
    glColor3f(0.4, 0.2, 0.05);
    glBegin(GL_QUADS);
    glVertex2f(10.0 + i, 20.0 + j);
    glVertex2f(50.0 + i, 20.0 + j);
    glVertex2f(50.0 + i, 10.0 + j);
    glVertex2f(10.0 + i, 10.0 + j);
    glEnd();

// Handle
    glColor3f(0.3, 0.15, 0.05);
    glBegin(GL_LINE_STRIP);
    for (float t = 0; t <= PI; t += 0.1)
        glVertex2f(i + 30 + 30 * cos(t), j + 30 + 20 * sin(t));
    glEnd();
}

// ---------- Egg Reset ----------
void egg_start()
{
    egg_yc = hen_y - 20;
    egg_xc = hen_x + 70;
    dropped_eggs++;
}
// ---------- Check Catch & Miss ----------
void checkCatch()
{
    if (egg_yc <= basket_y + 40 && (egg_xc >= basket_x && egg_xc <= basket_x + 60))
    {
        eggs_caught++;
        egg_start();  // reset after catch
    }
    else if (egg_yc <= 0)
    {
        missed_eggs++;
        egg_start();  // reset after miss
        if (missed_eggs >= 10)
            gameOver = 1;
    }
}
// ---------- Display ----------
void display()
{
    glClear(GL_COLOR_BUFFER_BIT);

    // --- Start screen ---
    if (!startGame)
    {
        drawSky();
        drawSun(sun_x, sun_y);
        drawCloud(100, 580);
        drawCloud(350, 600);
        drawGround();

        glColor3f(1, 1, 0);
        drawText(180, 340, "CATCH THE EGG - DELUXE", GLUT_BITMAP_TIMES_ROMAN_24);
        glColor3f(1, 1, 1);
        drawText(230, 290, "Press 'S' to Start", GLUT_BITMAP_HELVETICA_18);
        glColor3f(0, 1, 0);
        drawText(210, 260, "Move basket with your Mouse", GLUT_BITMAP_HELVETICA_18);
        glutSwapBuffers();
        return;
    }
// --- Game over screen ---
    if (gameOver)
    {
        drawSky();
        drawGround();
        glColor3f(1, 0, 0);
        drawText(250, 350, "GAME OVER!", GLUT_BITMAP_TIMES_ROMAN_24);
        glColor3f(1, 1, 1);
        char info[50];
        sprintf(info, "Final Score: %d", eggs_caught);
        drawText(260, 300, info, GLUT_BITMAP_HELVETICA_18);
        drawText(220, 260, "Press 'S' to Restart or 'Q' to Quit", GLUT_BITMAP_HELVETICA_18);
        glutSwapBuffers();
        return;
    }

  // --- Game background ---
    drawSky();
    drawSun(sun_x, sun_y);
    drawCloud(cloud1, 580);
    drawCloud(cloud2, 600);
    drawGround();

    // Hen
    drawHen(hen_x - 40, hen_y - 40);

    // Egg
    drawEgg();

    // Basket
    drawBasket(basket_x, basket_y);

    // Scoreboard bar
    glBegin(GL_QUADS);
    glColor3f(0.2, 0.2, 0.2);
    glVertex2f(0, 610);
    glVertex2f(a, 610);
    glColor3f(0.1, 0.1, 0.1);
    glVertex2f(a, 650);
    glVertex2f(0, 650);
    glEnd();

    glColor3f(1, 1, 1);
    char info[50];
    sprintf(info, "Score: %d", eggs_caught);
    drawText(20, 625, info, GLUT_BITMAP_HELVETICA_18);
    sprintf(info, "Missed: %d", missed_eggs);
    drawText(250, 625, info, GLUT_BITMAP_HELVETICA_18);
    sprintf(info, "Level: %d", level_count);
    drawText(500, 625, info, GLUT_BITMAP_HELVETICA_18);

    // ---- Level and Dynamic Speed ----
    if (eggs_caught >= 30)
        level_count = 4;
    else if (eggs_caught >= 20)
        level_count = 3;
    else if (eggs_caught >= 10)
        level_count = 2;
    else
        level_count = 1;

    float base_speed = 0.4;
    float level_boost = (level_count - 1) * 0.3;
    float progressive_boost = eggs_caught * 0.02;
    egg_speed = base_speed + level_boost + progressive_boost;

    egg_yc -= egg_speed;
    checkCatch();  // check after moving

    glutSwapBuffers();
}

// ---------- Mouse ----------
void basket_move(int x, int y)
{
    basket_x = x - 30;
    glutPostRedisplay();
}

// ---------- Keyboard ----------
void keyboard(unsigned char key, int x, int y)
{
    if (key == 's' || key == 'S')
    {
        startGame = 1;
        gameOver = 0;
        eggs_caught = 0;
        missed_eggs = 0;
        egg_speed = 0.4;
        egg_start();
    }
    if (key == 'q' || key == 'Q')
        exit(0);
}
// ---------- Update ----------
void update(int value)
{
    if (startGame && !gameOver)
    {
        hen_x += henDir * 2;
        if (hen_x >= 400)
            henDir = -1;
        if (hen_x <= 100)
            henDir = 1;

        // Animate wing
        if (wingDir == 1)
            wingAngle += 0.2;
        else
            wingAngle -= 0.2;
        if (wingAngle > PI / 6)
            wingDir = -1;
        if (wingAngle < -PI / 6)
            wingDir = 1;

        // Move clouds
        cloud1 += 0.2;
        cloud2 += 0.1;
        if (cloud1 > 650)
            cloud1 = -100;
        if (cloud2 > 650)
            cloud2 = -150;
    }
  glutPostRedisplay();
    glutTimerFunc(16, update, 0);
}
// ---------- Main ----------
int main(int argc, char **argv)
{
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGB);
    glutInitWindowSize(a, b);
    glutCreateWindow("Catch The Egg - Deluxe Edition (Enhanced)");
glClearColor(0.4, 0.7, 1.0, 0.0);
    glMatrixMode(GL_PROJECTION);
    gluOrtho2D(0, a, 0, b);

    glutDisplayFunc(display);
    glutKeyboardFunc(keyboard);
    glutPassiveMotionFunc(basket_move);
    glutTimerFunc(16, update, 0);
    glutMainLoop();
    return 0;
}




  
